üìò Notification Microservice Documentation

üìñ Overview
This microservice is responsible for handling user notifications in a Library Management System. It listens to Kafka topics for events such as due date reminders, overdue alerts, and availability of reserved books, and persists these notifications to a database. It also provides RESTful APIs to fetch, create, delete, and update the status of notifications.

üèóÔ∏è Architecture & Technology Stack
Framework: Spring Boot

Messaging System: Apache Kafka

Database: JPA (backed by an RDBMS MySQL)

Validation: Jakarta Bean Validation

Data Serialization: Jackson (for JSON)

API: RESTful with Spring MVC

üß± Package Structure

com.library.management
‚îú‚îÄ‚îÄ config              # Kafka Consumer Configuration
‚îú‚îÄ‚îÄ controller          # REST Controller
‚îú‚îÄ‚îÄ entity              # JPA Entity and Error Representation
‚îú‚îÄ‚îÄ exceptions          # Global Exception Handling
‚îú‚îÄ‚îÄ service             # Business Logic Layer
‚îú‚îÄ‚îÄ repo                # Data Access Layer (assumed present)


üõ†Ô∏è Setup Instructions
Prerequisites
Java 17+

Maven

Apache Kafka server

Spring Boot configured (with application.yml or application.properties)

A database configured (MySQL)

Steps
Clone the repository and navigate to the project root.

Configure your Kafka and DB connection in application.properties.

Run Kafka broker and create required topics:

book.due_date_reminder

book.overdue

book.available_reserved

Build the project:

./mvnw clean install

Run the application:

./mvnw spring-boot:run


üîÅ Kafka Consumer

Topics Consumed:

book.due_date_reminder

book.overdue

book.available_reserved

Group ID:
notification-group

Behavior:
Parses incoming Kafka messages as JSON

Extracts userId and message

Persists to the notifications table

üì° REST APIs
GET /notifications/{userId}
Retrieve a paginated list of notifications for a user.

Query Params:

page (default: 0)

size (default: 10)

Response: Page<Notification>

POST /notifications
Create a new notification.

Request Body:


{
  "userId": 123,
  "message": "Your reserved book is now available."
}
Response: Notification

DELETE /notifications/{id}
Delete a notification by ID.

Response: 200 OK

PATCH /notifications/{id}/seen
Mark a notification as seen.

Response: 200 OK

üìÇ Entity: Notification
Field	Type	Description
id	Long	Primary key
userId	Long	User receiving the notification
message	String	Notification content
timestamp	LocalDateTime	Creation time (auto-filled)
seen	boolean	Read status

‚ùó Error Handling
Validation Errors
Returns 400 Bad Request with a list of error messages.

Generic Errors
Returns 500 Internal Server Error with error description.

üìå Best Practices Followed
Clean separation of concerns: controller, service, consumer

Centralized exception handling with @RestControllerAdvice

Validation using Jakarta annotations

Use of Kafka for asynchronous event-driven communication

Paginated responses to improve scalability

üöÄ Future Enhancements
Add authentication and user authorization

Extend support for notification channels (email, SMS, push)

Implement caching for frequently accessed notifications

Enable configurable message templates




Go this Directory  library-management\services\NotificationService\src\main\resources

Change Application.properties accordingly 

Run the Queries.sql in MySQL workbench or console

Use Queries to create insert data into sql

-- Insert sample notifications for user ID 1
INSERT INTO notifications (user_id, message, timestamp, seen) VALUES
(1, 'Your book "Clean Code" is due in 2 days.', NOW(), false),
(1, 'Your reserved book "Domain-Driven Design" is now available.', NOW() - INTERVAL 1 DAY, false),
(1, 'Reminder: Return "Design Patterns" today to avoid overdue.', NOW() - INTERVAL 2 DAY, true);

-- Insert sample notifications for user ID 2
INSERT INTO notifications (user_id, message, timestamp, seen) VALUES
(2, 'Overdue alert: "Refactoring" was due 3 days ago.', NOW() - INTERVAL 3 DAY, false),
(2, 'New book "Microservices Patterns" added to library.', NOW(), true);

-- Insert sample notifications for user ID 3
INSERT INTO notifications (user_id, message, timestamp, seen) VALUES
(3, 'You have successfully renewed "Effective Java".', NOW() - INTERVAL 5 HOUR, true),
(3, 'Upcoming due date: "Kubernetes in Action".', NOW() - INTERVAL 1 HOUR, false);






